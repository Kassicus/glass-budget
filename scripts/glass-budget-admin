#!/bin/bash

# Glass Budget Administration Script
# Provides administrative functions for managing Glass Budget installation

set -euo pipefail

# Configuration
GLASS_BUDGET_DIR="/opt/glass-budget"
GLASS_BUDGET_DATA="/var/lib/glass-budget"
GLASS_BUDGET_LOGS="/var/log/glass-budget"
GLASS_BUDGET_CONFIG="/etc/glass-budget/glass-budget.env"
SERVICE_NAME="glass-budget"
BACKUP_DIR="/var/lib/glass-budget/backups"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

# Check if running with appropriate privileges
check_privileges() {
    if [[ $EUID -eq 0 ]]; then
        IS_ROOT=true
    else
        IS_ROOT=false
        if ! groups | grep -q sudo; then
            error "This command requires sudo privileges"
            exit 1
        fi
    fi
}

# Service management functions
service_status() {
    systemctl status $SERVICE_NAME --no-pager -l
}

service_start() {
    log "Starting $SERVICE_NAME service..."
    systemctl start $SERVICE_NAME
    log "Service started successfully"
}

service_stop() {
    log "Stopping $SERVICE_NAME service..."
    systemctl stop $SERVICE_NAME
    log "Service stopped successfully"
}

service_restart() {
    log "Restarting $SERVICE_NAME service..."
    systemctl restart $SERVICE_NAME
    log "Service restarted successfully"
}

service_logs() {
    local LINES=${1:-50}
    log "Showing last $LINES lines of service logs..."
    journalctl -u $SERVICE_NAME -n $LINES --no-pager
}

service_logs_follow() {
    log "Following service logs (Ctrl+C to exit)..."
    journalctl -u $SERVICE_NAME -f
}

# Backup functions
backup_create() {
    local BACKUP_NAME="backup-$(date +%Y%m%d-%H%M%S)"
    local BACKUP_PATH="$BACKUP_DIR/$BACKUP_NAME"
    
    log "Creating backup: $BACKUP_NAME"
    
    # Create backup directory
    mkdir -p "$BACKUP_PATH"
    
    # Stop service temporarily for consistent backup
    log "Stopping service for consistent backup..."
    systemctl stop $SERVICE_NAME
    
    # Backup database
    if [ -f "$GLASS_BUDGET_DATA/budget.db" ]; then
        cp "$GLASS_BUDGET_DATA/budget.db" "$BACKUP_PATH/"
        log "Database backed up"
    fi
    
    # Backup configuration
    cp "$GLASS_BUDGET_CONFIG" "$BACKUP_PATH/"
    log "Configuration backed up"
    
    # Backup any additional data files
    if [ -d "$GLASS_BUDGET_DATA" ]; then
        cp -r "$GLASS_BUDGET_DATA"/* "$BACKUP_PATH/" 2>/dev/null || true
    fi
    
    # Create archive
    tar -czf "$BACKUP_PATH.tar.gz" -C "$BACKUP_DIR" "$BACKUP_NAME"
    rm -rf "$BACKUP_PATH"
    
    # Restart service
    systemctl start $SERVICE_NAME
    
    log "Backup created: $BACKUP_PATH.tar.gz"
    log "Backup size: $(du -h "$BACKUP_PATH.tar.gz" | cut -f1)"
}

backup_list() {
    log "Available backups:"
    if [ -d "$BACKUP_DIR" ]; then
        ls -la "$BACKUP_DIR"/*.tar.gz 2>/dev/null | while read -r line; do
            echo "  $line"
        done
    else
        warn "No backup directory found"
    fi
}

backup_restore() {
    local BACKUP_FILE="$1"
    
    if [ ! -f "$BACKUP_FILE" ]; then
        error "Backup file not found: $BACKUP_FILE"
        exit 1
    fi
    
    warn "This will restore from backup and overwrite current data!"
    read -p "Are you sure? (yes/NO): " -r CONFIRM
    
    if [ "$CONFIRM" != "yes" ]; then
        log "Restore cancelled"
        return
    fi
    
    log "Restoring from backup: $BACKUP_FILE"
    
    # Stop service
    systemctl stop $SERVICE_NAME
    
    # Create temporary directory
    local TEMP_DIR=$(mktemp -d)
    
    # Extract backup
    tar -xzf "$BACKUP_FILE" -C "$TEMP_DIR"
    local BACKUP_NAME=$(basename "$BACKUP_FILE" .tar.gz)
    
    # Restore files
    if [ -f "$TEMP_DIR/$BACKUP_NAME/budget.db" ]; then
        cp "$TEMP_DIR/$BACKUP_NAME/budget.db" "$GLASS_BUDGET_DATA/"
        chown glass-budget:glass-budget "$GLASS_BUDGET_DATA/budget.db"
    fi
    
    if [ -f "$TEMP_DIR/$BACKUP_NAME/glass-budget.env" ]; then
        cp "$TEMP_DIR/$BACKUP_NAME/glass-budget.env" "$GLASS_BUDGET_CONFIG"
        chown root:glass-budget "$GLASS_BUDGET_CONFIG"
        chmod 640 "$GLASS_BUDGET_CONFIG"
    fi
    
    # Cleanup
    rm -rf "$TEMP_DIR"
    
    # Start service
    systemctl start $SERVICE_NAME
    
    log "Restore completed successfully"
}

backup_cleanup() {
    local RETENTION_DAYS=${1:-30}
    
    log "Cleaning up backups older than $RETENTION_DAYS days..."
    
    if [ -d "$BACKUP_DIR" ]; then
        find "$BACKUP_DIR" -name "backup-*.tar.gz" -mtime +$RETENTION_DAYS -delete
        log "Cleanup completed"
    else
        warn "No backup directory found"
    fi
}

# Update functions
update_check() {
    log "Checking for updates..."
    apt list --upgradable | grep glass-budget || log "No updates available"
}

update_install() {
    log "Installing updates..."
    apt update
    apt install --only-upgrade glass-budget
    log "Update completed. Restarting service..."
    systemctl restart $SERVICE_NAME
}

# Configuration functions
config_edit() {
    local EDITOR=${EDITOR:-nano}
    log "Opening configuration file with $EDITOR..."
    $EDITOR "$GLASS_BUDGET_CONFIG"
    
    read -p "Restart service to apply changes? (Y/n): " -r RESTART
    if [[ ! $RESTART =~ ^[Nn]$ ]]; then
        systemctl restart $SERVICE_NAME
        log "Configuration applied and service restarted"
    fi
}

config_show() {
    log "Current configuration:"
    cat "$GLASS_BUDGET_CONFIG"
}

config_validate() {
    log "Validating configuration..."
    
    # Check if required variables are set
    local REQUIRED_VARS=("SECRET_KEY" "DATABASE_URL")
    local VALID=true
    
    for VAR in "${REQUIRED_VARS[@]}"; do
        if ! grep -q "^$VAR=" "$GLASS_BUDGET_CONFIG" || grep -q "^$VAR=$" "$GLASS_BUDGET_CONFIG"; then
            error "Required variable $VAR is not set"
            VALID=false
        fi
    done
    
    # Check secret key
    if grep -q "SECRET_KEY=your-secret-key-here" "$GLASS_BUDGET_CONFIG"; then
        error "Default secret key detected. Please change it!"
        VALID=false
    fi
    
    if $VALID; then
        log "Configuration is valid"
    else
        error "Configuration validation failed"
        exit 1
    fi
}

# Health check functions
health_check() {
    log "Performing health check..."
    
    # Check service status
    if systemctl is-active --quiet $SERVICE_NAME; then
        log "✓ Service is running"
    else
        error "✗ Service is not running"
        return 1
    fi
    
    # Check if port is listening
    if netstat -tuln | grep -q ":5001 "; then
        log "✓ Application is listening on port 5001"
    else
        warn "✗ Application is not listening on port 5001"
    fi
    
    # Check database connection
    if sudo -u glass-budget $GLASS_BUDGET_DIR/venv/bin/python -c "
import sys
sys.path.insert(0, '$GLASS_BUDGET_DIR')
try:
    from app import app, db
    with app.app_context():
        db.engine.execute('SELECT 1')
    print('✓ Database connection successful')
except Exception as e:
    print(f'✗ Database connection failed: {e}')
    sys.exit(1)
" 2>/dev/null; then
        log "✓ Database connection successful"
    else
        error "✗ Database connection failed"
        return 1
    fi
    
    # Check disk space
    local DISK_USAGE=$(df "$GLASS_BUDGET_DATA" | tail -1 | awk '{print $5}' | sed 's/%//')
    if [ "$DISK_USAGE" -gt 90 ]; then
        warn "✗ Disk usage is at ${DISK_USAGE}%"
    else
        log "✓ Disk usage is at ${DISK_USAGE}%"
    fi
    
    log "Health check completed"
}

# Database functions
database_migrate() {
    log "Running database migrations..."
    systemctl stop $SERVICE_NAME
    sudo -u glass-budget $GLASS_BUDGET_DIR/venv/bin/python $GLASS_BUDGET_DIR/migrate_db.py
    systemctl start $SERVICE_NAME
    log "Database migration completed"
}

database_reset() {
    warn "This will delete all data and reset the database!"
    read -p "Are you sure? Type 'RESET' to confirm: " -r CONFIRM
    
    if [ "$CONFIRM" != "RESET" ]; then
        log "Database reset cancelled"
        return
    fi
    
    log "Resetting database..."
    systemctl stop $SERVICE_NAME
    
    # Backup current database
    backup_create
    
    # Remove database file
    if [ -f "$GLASS_BUDGET_DATA/budget.db" ]; then
        rm "$GLASS_BUDGET_DATA/budget.db"
    fi
    
    # Recreate database
    sudo -u glass-budget $GLASS_BUDGET_DIR/venv/bin/python -c "
import sys
sys.path.insert(0, '$GLASS_BUDGET_DIR')
from app import app, db
with app.app_context():
    db.create_all()
"
    
    systemctl start $SERVICE_NAME
    log "Database reset completed"
}

# Usage information
show_help() {
    echo "Glass Budget Administration Tool"
    echo ""
    echo "Usage: glass-budget-admin COMMAND [OPTIONS]"
    echo ""
    echo "Service Management:"
    echo "  status                 Show service status"
    echo "  start                  Start the service"
    echo "  stop                   Stop the service"
    echo "  restart                Restart the service"
    echo "  logs [lines]           Show service logs (default: 50 lines)"
    echo "  logs-follow            Follow service logs in real-time"
    echo ""
    echo "Backup Management:"
    echo "  backup                 Create a new backup"
    echo "  backup-list            List available backups"
    echo "  backup-restore FILE    Restore from backup file"
    echo "  backup-cleanup [days]  Remove backups older than N days (default: 30)"
    echo ""
    echo "Configuration:"
    echo "  config-edit            Edit configuration file"
    echo "  config-show            Show current configuration"
    echo "  config-validate        Validate configuration"
    echo ""
    echo "Updates:"
    echo "  update-check           Check for available updates"
    echo "  update-install         Install available updates"
    echo ""
    echo "Maintenance:"
    echo "  health                 Perform health check"
    echo "  database-migrate       Run database migrations"
    echo "  database-reset         Reset database (WARNING: deletes all data)"
    echo ""
    echo "Examples:"
    echo "  glass-budget-admin status"
    echo "  glass-budget-admin backup"
    echo "  glass-budget-admin logs 100"
    echo "  glass-budget-admin backup-restore /var/lib/glass-budget/backups/backup-20240814-120000.tar.gz"
    echo ""
}

# Main command dispatcher
main() {
    check_privileges
    
    case "${1:-}" in
        "status")
            service_status
            ;;
        "start")
            service_start
            ;;
        "stop")
            service_stop
            ;;
        "restart")
            service_restart
            ;;
        "logs")
            service_logs "${2:-50}"
            ;;
        "logs-follow")
            service_logs_follow
            ;;
        "backup")
            backup_create
            ;;
        "backup-list")
            backup_list
            ;;
        "backup-restore")
            if [ -z "${2:-}" ]; then
                error "Backup file path required"
                exit 1
            fi
            backup_restore "$2"
            ;;
        "backup-cleanup")
            backup_cleanup "${2:-30}"
            ;;
        "config-edit")
            config_edit
            ;;
        "config-show")
            config_show
            ;;
        "config-validate")
            config_validate
            ;;
        "update-check")
            update_check
            ;;
        "update-install")
            update_install
            ;;
        "health")
            health_check
            ;;
        "database-migrate")
            database_migrate
            ;;
        "database-reset")
            database_reset
            ;;
        "help"|"--help"|"-h"|"")
            show_help
            ;;
        *)
            error "Unknown command: $1"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Execute main function
main "$@"