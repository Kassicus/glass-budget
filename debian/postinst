#!/bin/bash

set -e

case "$1" in
    configure)
        echo "Configuring Glass Budget..."
        
        # Check required commands are available
        for cmd in python3 systemctl; do
            if ! command -v "$cmd" >/dev/null 2>&1; then
                echo "Error: Required command '$cmd' not found" >&2
                exit 1
            fi
        done
        
        # Create glass-budget user if it doesn't exist
        if ! getent passwd glass-budget > /dev/null 2>&1; then
            adduser --system --group --home /var/lib/glass-budget \
                    --disabled-password --disabled-login \
                    --shell /bin/false glass-budget
        fi
        
        # Ensure directories exist (should be created by package but safety check)
        mkdir -p /opt/glass-budget
        mkdir -p /var/lib/glass-budget
        mkdir -p /var/log/glass-budget
        mkdir -p /etc/glass-budget
        
        # Set ownership and permissions safely
        if [ -d /opt/glass-budget ]; then
            chown -R glass-budget:glass-budget /opt/glass-budget || true
        fi
        if [ -d /var/lib/glass-budget ]; then
            chown -R glass-budget:glass-budget /var/lib/glass-budget || true
        fi
        if [ -d /var/log/glass-budget ]; then
            chown -R glass-budget:glass-budget /var/log/glass-budget || true
        fi
        if [ -f /etc/glass-budget/glass-budget.env ]; then
            chown root:glass-budget /etc/glass-budget/glass-budget.env || true
            chmod 640 /etc/glass-budget/glass-budget.env
        fi
        
        # Ensure proper directory permissions
        chmod 755 /opt/glass-budget
        chmod 755 /var/lib/glass-budget
        chmod 755 /var/log/glass-budget
        chmod 750 /etc/glass-budget
        
        # Create Python virtual environment
        if [ ! -d /opt/glass-budget/venv ]; then
            echo "Creating Python virtual environment..."
            if python3 -m venv /opt/glass-budget/venv; then
                chown -R glass-budget:glass-budget /opt/glass-budget/venv
            else
                echo "Failed to create virtual environment" >&2
                exit 1
            fi
        fi
        
        # Install Python dependencies
        if [ -f /opt/glass-budget/requirements.txt ]; then
            echo "Installing Python dependencies..."
            if sudo -u glass-budget /opt/glass-budget/venv/bin/pip install --upgrade pip; then
                if sudo -u glass-budget /opt/glass-budget/venv/bin/pip install -r /opt/glass-budget/requirements.txt; then
                    echo "Dependencies installed successfully"
                else
                    echo "Failed to install Python dependencies" >&2
                    exit 1
                fi
            else
                echo "Failed to upgrade pip" >&2
                exit 1
            fi
        else
            echo "Warning: requirements.txt not found, skipping dependency installation"
        fi
        
        # Generate secret key if not exists
        if ! grep -q "SECRET_KEY=" /etc/glass-budget/glass-budget.env || grep -q "SECRET_KEY=your-secret-key-here" /etc/glass-budget/glass-budget.env; then
            SECRET_KEY=$(python3 -c "import secrets; print(secrets.token_urlsafe(32))")
            sed -i "s/SECRET_KEY=.*/SECRET_KEY=${SECRET_KEY}/" /etc/glass-budget/glass-budget.env
        fi
        
        # Initialize database
        if [ -f /opt/glass-budget/migrate_db.py ]; then
            echo "Initializing database..."
            cd /opt/glass-budget
            if sudo -u glass-budget /opt/glass-budget/venv/bin/python migrate_db.py; then
                echo "Database initialized successfully"
            else
                echo "Warning: Database initialization failed (may be normal for upgrades)"
            fi
        else
            echo "Warning: migrate_db.py not found, skipping database initialization"
        fi
        
        # Enable and configure services
        echo "Configuring systemd service..."
        systemctl daemon-reload
        
        if systemctl enable glass-budget.service; then
            echo "Service enabled successfully"
        else
            echo "Warning: Failed to enable service" >&2
        fi
        
        # Configure nginx if requested
        if [ -f /etc/nginx/sites-available/glass-budget ]; then
            if [ ! -L /etc/nginx/sites-enabled/glass-budget ]; then
                echo "Nginx configuration available at /etc/nginx/sites-available/glass-budget"
                echo "To enable, run: sudo ln -s /etc/nginx/sites-available/glass-budget /etc/nginx/sites-enabled/"
                echo "Then reload nginx: sudo systemctl reload nginx"
            fi
        fi
        
        # Start the service
        echo "Starting Glass Budget service..."
        if systemctl start glass-budget.service; then
            echo "Service started successfully"
        else
            echo "Warning: Failed to start service - check configuration and try: systemctl start glass-budget.service" >&2
        fi
        
        echo ""
        echo "Glass Budget has been installed successfully!"
        echo ""
        echo "Configuration file: /etc/glass-budget/glass-budget.env"
        echo "Application directory: /opt/glass-budget"
        echo "Data directory: /var/lib/glass-budget"
        echo "Log directory: /var/log/glass-budget"
        echo ""
        echo "Service status: systemctl status glass-budget"
        echo "Admin commands: glass-budget-admin --help"
        echo ""
        echo "To complete setup:"
        echo "1. Edit /etc/glass-budget/glass-budget.env with your settings"
        echo "2. Configure nginx (optional): ln -s /etc/nginx/sites-available/glass-budget /etc/nginx/sites-enabled/"
        echo "3. Restart service: systemctl restart glass-budget"
        echo ""
        ;;
    
    abort-upgrade|abort-remove|abort-deconfigure)
        ;;
    
    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
        ;;
esac

#DEBHELPER#

exit 0