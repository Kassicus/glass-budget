name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_budget_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Set up environment variables
      run: |
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_budget_db" >> $GITHUB_ENV
        echo "FLASK_ENV=testing" >> $GITHUB_ENV
        echo "TESTING=true" >> $GITHUB_ENV

    - name: Run database migrations
      run: |
        python -c "
        from app import app, db
        with app.app_context():
            try:
                db.drop_all()
            except:
                pass  # Database might not exist yet
            db.create_all()
            print('Database initialized successfully')
        "

    - name: Run tests
      run: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd)"
        coverage run -m pytest tests/ -v --tb=short
        coverage report --show-missing
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
      timeout-minutes: 5

    - name: Check for known vulnerabilities in dependencies
      run: |
        # Use the new scan command instead of deprecated check
        safety scan --target requirements.txt --output=json --exit-code
      continue-on-error: true
      timeout-minutes: 3

    - name: Run bandit security linter
      run: |
        bandit -r . -x ./budget_env/,./tests/,./venv/,./env/ -f json
      continue-on-error: true
      timeout-minutes: 2

    - name: Run semgrep security analysis
      run: |
        semgrep --config=auto . --json --timeout=60
      continue-on-error: true
      timeout-minutes: 3

  build-package:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          devscripts \
          dh-make \
          fakeroot \
          lintian \
          dh-python \
          python3-all \
          python3-setuptools \
          python3-pip \
          python3-venv \
          debhelper \
          dh-exec \
          python3-flask \
          python3-flask-sqlalchemy \
          python3-flask-login \
          python3-flask-bcrypt

    - name: Determine version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=$(date +%Y%m%d)-$(git rev-parse --short HEAD)
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"

    - name: Build Debian package
      run: |
        export VERSION=${{ steps.version.outputs.VERSION }}
        echo "Building version: $VERSION"
        ./scripts/build-package.sh
        
        # List created files for debugging
        echo "Files created after build:"
        ls -la *.deb *.dsc *.tar.gz *.changes 2>/dev/null || echo "No build artifacts found in root directory"

    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: debian-packages-${{ steps.version.outputs.VERSION }}
        path: |
          *.deb
          *.dsc
          *.tar.gz
          *.changes

    - name: Create Release and Upload Assets
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        
        # Find the generated files
        DEB_FILE=$(find . -name "*.deb" -type f | head -1)
        TAR_FILE=$(find . -name "*.tar.gz" -type f | head -1)
        
        if [ -z "$DEB_FILE" ]; then
          echo "Error: No .deb file found"
          exit 1
        fi
        
        echo "Found DEB file: $DEB_FILE"
        if [ -n "$TAR_FILE" ]; then
          echo "Found TAR file: $TAR_FILE"
        fi
        
        # Create release with GitHub CLI
        cat > release_notes.md << 'EOF'
        ## Glass Budget v${{ steps.version.outputs.VERSION }}
        
        ### Installation
        
        **Ubuntu Server 24.04:**
        ```bash
        # Download and install
        wget https://github.com/kassicus/glass-budget/releases/download/${{ github.ref }}/glass-budget_${{ steps.version.outputs.VERSION }}_all.deb
        sudo apt install ./glass-budget_${{ steps.version.outputs.VERSION }}_all.deb
        
        # Or use the installation script
        curl -sSL https://github.com/kassicus/glass-budget/releases/download/${{ github.ref }}/install.sh | sudo bash
        ```
        
        ### Update
        
        ```bash
        sudo glass-budget-update
        ```
        
        ### Features
        
        - Modern glassmorphism UI design
        - Account management with multiple types
        - Transaction tracking and categorization  
        - Recurring bill management
        - Savings goals with progress tracking
        - Production-ready with systemd and nginx
        
        ### Files
        
        - `glass-budget_${{ steps.version.outputs.VERSION }}_all.deb` - Main package for Ubuntu Server
        - `install.sh` - Automated installation script
        
        Built from commit: ${{ github.sha }}
        EOF
        
        # Create release
        gh release create "$TAG_NAME" \
          --title "Glass Budget v${{ steps.version.outputs.VERSION }}" \
          --notes-file release_notes.md \
          "$DEB_FILE#glass-budget_${{ steps.version.outputs.VERSION }}_all.deb" \
          "./scripts/install.sh#install.sh"
        
        # Upload source package if it exists
        if [ -n "$TAR_FILE" ]; then
          gh release upload "$TAG_NAME" "$TAR_FILE#glass-budget_${{ steps.version.outputs.VERSION }}.tar.gz"
        fi

  deploy-staging:
    needs: build-package
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Deploy to staging server
      run: |
        echo "Deploying to staging environment"
        # Add actual deployment steps here based on your infrastructure
        
  deploy-production:
    needs: build-package
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    environment: production
    
    steps:
    - name: Deploy to production server
      run: |
        echo "Deploying to production environment"
        # Add actual deployment steps here based on your infrastructure